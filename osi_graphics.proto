syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi3;

//
// \brief This format describes the graphic-configurationis made in the 
// simulation-master. So stand-alone graphicengines can work because of
// these information.
//
message Graphics
{
    //
    // The interface version used by the sender.
    //
    optional InterfaceVersion version = 1;
    
    // The data timestamp of the simulation environment. The zero time point is
    // arbitrary but must be identical for all messages.
    // Recommendation: Zero time point for start point of the simulation.
    //
    optional Timestamp timestamp = 2;

    // Opaque reference of a map.
    //
    // \note Origin and orientation of the map have to coincide with the
    // inertial coordinate frame of the ground truth.
    //
    // \note It is implementation-specific how map_reference is resolved.
    //
    optional string map_reference = 3;
    
    //
    // Here is the main information about how a screen is configured.
    // E.g.: Place of the camera, screen-configuration, avatar information, ...
    //
    optional ConfigurationScreen configuration_screen = 5;
    
    //
    // ToDo: Description
    //
    optional ConfigurationVirtualReality configuration_virtual_reality = 6;
    
    //
    // ToDo: Description
    //
    repeated ConfigurationHMIComponents configuration_hmi_components = 7;

    
    Open:
    Puffer?
    IsMotionCompensation
    Kopfposition


    OSI-Env (Tageszeitentypen, Cloudspeed, Wettertypen, Cloudshadowintensity, Percipitation, TimeofDay)
    country_code
}

// 
// \brief ToDo: Description
//
message ConfigurationScreen
{    
    //
    // \brief ToDo: Description
    //
    repeated GraphicEngineConfiguration graphic_engine_configuration = 1;
    
    //
    // \brief ToDo: Description
    //
    repeated DisplayConfiguration display_configuration = 2;
    
    //
    // \brief ToDo: Description
    //
    repeated WindowConfiguration window_configuration = 3;
    
    //
    // \brief ToDo: Description
    //
    repeated ViewportConfiguration viewport_configuration = 4;
    
    // 
    // \brief ToDo: Description
    //
    message GraphicEngineConfiguration
    {       
        //
        // ID of the graphic engine.
        //
        optional int graphic_engine_id = 1;
    }

    // 
    // \brief ToDo: Description
    //
    message DisplayConfiguration
    {
        //
        // Defines on which display the window is placed.
        //
        optional int used_by_graphic_engine_id = 1;
        
        //
        // ID of the display.
        //
        optional int display_id = 2;
    }

    // 
    // \brief ToDo: Description
    //
    message WindowConfiguration
    {
        //
        // Defines on which display the window is placed.
        //
        optional int placement_on_display_id = 1;
        
        //
        // ID of the window.
        //
        optional int window_id = 2;
        
        //
        // Position x of the window inside a display.
        //
        optional double position_x = 3;

        //
        // Position y of the window inside a display.
        //
        optional double position_y = 4;

        //
        // Pixel-width in x of the window inside a display.
        //
        optional double size_x = 5;

        //
        // Pixel-height in y of the window inside a display.
        //
        optional double size_y = 6;
    }
    
    // 
    // \brief ToDo: Description
    //
    message ViewportConfiguration
    {
        //
        // Defines on which window the viewport is placed.
        //
        optional int placement_on_window_id = 1;
        
        //
        // ID of the viewport.
        //
        optional int viewport_id = 2;
        
        //
        // Position x of the viewport inside a window.
        //
        optional double position_x = 3;

        //
        // Position y of the viewport inside a window.
        //
        optional double position_y = 4;

        //
        // Pixel-width in x of the viewport inside a window.
        //
        optional double size_x = 5;

        //
        // Pixel-height in y of the viewport inside a window.
        //
        optional double size_y = 6;
        
        //
        // ToDo: Description.
        //
        // Range: [0, 400]
        //
        // Unit: [%]
        //
        optional double super_sampling_configuration = 7;
        
        //
        // ToDo: Description.
        //
        optional CameraConfiguration camera_configuration = 8;
    }
    
    // 
    // \brief Here is the main information about how the graphic-engine is configured.
    // E.g.: Place of the camera, screen-configuration, avatar information, ...
    //
    message CameraConfiguration
    {
        // Some open points:
        bFullScreen
        Camera
        - CamView (DriverView, ..., ) 
        - Offset-Rotation, Position
        //Eine Fixierungspunkt pro Kamera auf entweder relativ oder absolut

        //
        // A cartesian 3D vector for the position, defined in osi_common.
        // This is the position where the virtual camera is placed.
        //
        // Unit: [m]
        //
        optional Vector3d position = 1;

        //
        // A 3D vector for the orientaion, defined in osi_common.
        // This is the orientation of the virtual camera.
        //
        // Unit: [rad]
        //
        optional Orientation3d orientation = 2;
        
        //
        // A 3D vector for the orientaion, defined in osi_common.
        // This is the orientation-rate of the virtual camera.
        //
        // Unit: [rad/s]
        //
        optional Orientation3d orientation_rate = 3;
        
        //
        // ToDo: Description.
        //
        optional double clipping_far = 4;
        
        //
        // ToDo: Description.
        //
        optional double clipping_near = 5;
        
        //
        // ToDo: Description.
        //
        optional double frustum = 6;

        //
        // Should the ego-vehicle been shown?
        // Useful if the camera is inside the ego-vehicle.
        //
        optional bool show_host_vehicle = 7;
        
        //
        // ToDo: Description.
        //
        optional Avatar avatar = 8;
    }
}

// 
// \brief ToDo: Description
//
message ConfigurationVirtualReality
{
    //
    // ToDo: Description - diagonal
    //
    // Unit: [mm]
    //
    optional double field_of_view_size = 1;
    
    //
    // ToDo: Description - degree
    //
    // Unit: []
    //
    optional double field_of_view_degree = 2;
    
    //
    // ToDo: Description
    //
    optional bool hmd_front_camera_enabled = 3;
    
    //
    // Is it a vulnerable road user (e.g. pedestrian)?
    //
    optional bool is_vulnerable_road_user = 4;
    
    //
    // Is teleporting available?
    //
    optional bool is_teleporting_available = 4;
}

// 
// \brief ToDo: Description
//
message ConfigurationHMIComponents
{
    // Some open points:
    // Kombi Config
             bool DashBoardEnable;
             FString DashBoardURL;
             FVector2D DashBoardCanvas;
             FVector2D DashBoardSize;
             FVector2D DashBoardOffset;
             FVector2D DashBoardScale;
             FVector2D DashBoardCanvasLength;
    // CID Config
             bool LEDEnable;
             FString LEDURL;
             FVector2D LEDCanvas;
             FVector2D LEDSize;
             FVector2D LEDOffset;
             FVector2D LEDScale;
             FVector2D LEDLength;
             
             
    //
    // ToDo: Description
    //
    optional Vector3d position = 1;
}

// 
// \brief ToDo: Description. SkinColor, ID necessary?
//
message Avatar
{             
    //
    // Should the ego-avatar been shown?
    // Useful for VR-Applications.
    //
    optional bool show_host_avatar = 1;
    
    //
    // ToDo: Description
    //
    optional Gender gender = 2;
    
    // The gender of the avatar.
    //
    enum Gender
    {
        // The gender is unknown.
        //
        GENDER_UNKNOWN = 0;

        // It is another gender.
        //
        GENDER_OTHER = 1;

        // The gender is female.
        //
        GENDER_FEMALE = 2;
        
        // The gender is male.
        //
        GENDER_MALE = 3;
    }
}
