syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi3;

//
// \brief This format describes the graphic-configurationis made in the 
// simulation-master. So stand-alone graphicengines can work because of
// these information.
//
message Graphics
{
    // The data timestamp of the simulation environment. The zero time point is
    // arbitrary but must be identical for all messages.
    // Recommendation: Zero time point for start point of the simulation.
    //
    optional Timestamp timestamp = 1;

    // Opaque reference of a map.
    //
    // \note Origin and orientation of the map have to coincide with the
    // inertial coordinate frame of the ground truth.
    //
    // \note It is implementation-specific how map_reference is resolved.
    //
    optional string map_reference = 2;
    
    //
    // Here is the main information about how the graphic-engine is configured.
    // E.g.: Place of the camera, screen-configuration, avatar information, ...
    //
    repeated ConfigurationScreen configuration_screen = 3;
    
    //
    // ToDo: Description
    //
    repeated ConfigurationVirtualReality configuration_virtual_reality = 4;
    
    //
    // ToDo: Description
    //
    repeated ConfigurationHMIComponents configuration_hmi_components = 5;
    
    Open:
    Kommunal
    Avatar (?ID, Visibility, Gender, SkinColor(Recherchieren), 
    HideEgo, 
    Camera
    - CamView (DriverView, ..., AbsolutPosition (XYZ, RPY),  FarClipping, NearClipping, 
    - Offset-Rotation, Position
    SuperSamplingConfiguration (Prozentangabe 0-400 -> Bessere RenderqualitÃ¤t)
    Puffer?
    IsMotionCompensation
    Kopfposition

    IsVRU
    Teleporting?

    OSI-Env (Tageszeitentypen, Cloudspeed, Wettertypen, Cloudshadowintensity, Percipitation, TimeofDay)
    country_code
}

// 
// \brief ToDo: Description
//
message ConfigurationScreen
{
    // Some open points:
    Fenster
    - Position (X, Y)
    - Size (PixelX, PixelY)
    
    Camera
    - CamView (DriverView, ..., AbsolutPosition (XYZ, RPY),  FarClipping, NearClipping, Frustum) 
    - Offset-Rotation, Position
    //Eine Fixierungspunkt pro Kamera auf entweder relativ oder absolut

    //
    // ToDo: Description
    //
    optional Vector3d position = 1;
}

// 
// \brief ToDo: Description
//
message ConfigurationVirtualReality
{
    // Some open points:
    FOV (Diagonal, Grad), EnableHMDFrontCamera, 

    //
    // ToDo: Description
    //
    optional Vector3d position = 1;
}

// 
// \brief ToDo: Description
//
message ConfigurationHMIComponents
{
    // Some open points:
    // Kombi Config
             bool DashBoardEnable;
             FString DashBoardURL;
             FVector2D DashBoardCanvas;
             FVector2D DashBoardSize;
             FVector2D DashBoardOffset;
             FVector2D DashBoardScale;
             FVector2D DashBoardCanvasLength;
    // CID Config
             bool LEDEnable;
             FString LEDURL;
             FVector2D LEDCanvas;
             FVector2D LEDSize;
             FVector2D LEDOffset;
             FVector2D LEDScale;
             FVector2D LEDLength;
             
             
    //
    // ToDo: Description
    //
    optional Vector3d position = 1;
}


// 
// \brief Here is the main information about how the graphic-engine is configured.
// E.g.: Place of the camera, screen-configuration, avatar information, ...
//
message CameraConfiguration
{
    // Some open points:
    ScreenPositionX or Name?
    ScreenPositionY
    bFullScreen

    //
    // A cartesian 3D vector for the position, defined in osi_common.
    // This is the position where the virtual camera is placed.
    //
    optional Vector3d position = 1;

    //
    // A 3D vector for the orientaion, defined in osi_common.
    // This is the orientation of the virtual camera.
    //
    optional Orientation3d orientation = 2;

    //
    // Should the ego-vehicle been shown?
    // Useful if the camera is inside the ego-vehicle.
    //
    optional bool showEgoVehicle = 3;

    //
    // Should the ego-avatar been shown?
    // Useful for VR-Applications.
    //
    optional bool showEgoAvatar = 3;
    --> Extra Message: Gender, SkinColor, ...
}
